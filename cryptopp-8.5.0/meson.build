project('cryptopp', 'cpp', 
	version : '8.5.0',
	license: 'MIT',
	default_options : ['warning_level=2', 'cpp_std=c++14'])

include = include_directories('.')

cpp_args = [
	'-DCRYPTOPP_DISABLE_SSSE3',
	'-DCRYPTOPP_DISABLE_SSSE4',
	'-DCRYPTOPP_DISABLE_AESNI',
]

libs = []

sources = [
	'3way.cpp',
	'adler32.cpp',
	'algebra.cpp',
	'algparam.cpp',
	'allocate.cpp',
	'arc4.cpp',
	'aria.cpp',
	'aria_simd.cpp',
	'ariatab.cpp',
	'asn.cpp',
	'authenc.cpp',
	'base32.cpp',
	'base64.cpp',
	'basecode.cpp',
	'bench1.cpp',
	'bench2.cpp',
	'bench3.cpp',
	'bfinit.cpp',
	'blake2.cpp',
	'blake2b_simd.cpp',
	'blake2s_simd.cpp',
	'blowfish.cpp',
	'blumshub.cpp',
	'camellia.cpp',
	'cast.cpp',
	'casts.cpp',
	'cbcmac.cpp',
	'ccm.cpp',
	'chacha.cpp',
	'chacha_avx.cpp',
	'chacha_simd.cpp',
	'chachapoly.cpp',
	'cham.cpp',
	'cham_simd.cpp',
	'channels.cpp',
	'cmac.cpp',
	'cpu.cpp',
	'crc.cpp',
	'crc_simd.cpp',
	'cryptlib.cpp',
	'darn.cpp',
	'datatest.cpp',
	'default.cpp',
	'des.cpp',
	'dessp.cpp',
	'dh.cpp',
	'dh2.cpp',
	'dll.cpp',
	'dlltest.cpp',
	'donna_32.cpp',
	'donna_64.cpp',
	'donna_sse.cpp',
	'dsa.cpp',
	'eax.cpp',
	'ec2n.cpp',
	'eccrypto.cpp',
	'ecp.cpp',
	'elgamal.cpp',
	'emsa2.cpp',
	'eprecomp.cpp',
	'esign.cpp',
	'files.cpp',
	'filters.cpp',
	'fips140.cpp',
	'fipsalgt.cpp',
	'fipstest.cpp',
	'gcm.cpp',
	'gcm_simd.cpp',
	'gf256.cpp',
	'gf2_32.cpp',
	'gf2n.cpp',
	'gf2n_simd.cpp',
	'gfpcrypt.cpp',
	'gost.cpp',
	'gzip.cpp',
	'hc128.cpp',
	'hc256.cpp',
	'hex.cpp',
	'hight.cpp',
	'hmac.cpp',
	'hrtimer.cpp',
	'ida.cpp',
	'idea.cpp',
	'integer.cpp',
	'iterhash.cpp',
	'kalyna.cpp',
	'kalynatab.cpp',
	'keccak.cpp',
	'keccak_core.cpp',
	'keccak_simd.cpp',
	'lea.cpp',
	'lea_simd.cpp',
	'luc.cpp',
	'mars.cpp',
	'marss.cpp',
	'md2.cpp',
	'md4.cpp',
	'md5.cpp',
	'misc.cpp',
	'modes.cpp',
	'mqueue.cpp',
	'mqv.cpp',
	'nbtheory.cpp',
	'neon_simd.cpp',
	'oaep.cpp',
	'osrng.cpp',
	'padlkrng.cpp',
	'panama.cpp',
	'pch.cpp',
	'pkcspad.cpp',
	'poly1305.cpp',
	'polynomi.cpp',
	'ppc_power7.cpp',
	'ppc_power8.cpp',
	'ppc_power9.cpp',
	'ppc_simd.cpp',
	'pssr.cpp',
	'pubkey.cpp',
	'queue.cpp',
	'rabbit.cpp',
	'rabin.cpp',
	'randpool.cpp',
	'rc2.cpp',
	'rc5.cpp',
	'rc6.cpp',
	'rdrand.cpp',
	'rdtables.cpp',
	'regtest1.cpp',
	'regtest2.cpp',
	'regtest3.cpp',
	'regtest4.cpp',
	'rijndael.cpp',
	'rijndael_simd.cpp',
	'ripemd.cpp',
	'rng.cpp',
	'rsa.cpp',
	'rw.cpp',
	'safer.cpp',
	'salsa.cpp',
	'scrypt.cpp',
	'seal.cpp',
	'seed.cpp',
	'serpent.cpp',
	'sha.cpp',
	'sha3.cpp',
	'sha_simd.cpp',
	'shacal2.cpp',
	'shacal2_simd.cpp',
	'shake.cpp',
	'shark.cpp',
	'sharkbox.cpp',
	'simeck.cpp',
	'simon.cpp',
	'simon128_simd.cpp',
	'simple.cpp',
	'skipjack.cpp',
	'sm3.cpp',
	'sm4.cpp',
	'sm4_simd.cpp',
	'sosemanuk.cpp',
	'speck.cpp',
	'speck128_simd.cpp',
	'square.cpp',
	'squaretb.cpp',
	'sse_simd.cpp',
	'strciphr.cpp',
	'tea.cpp',
	'test.cpp',
	'tftables.cpp',
	'threefish.cpp',
	'tiger.cpp',
	'tigertab.cpp',
	'ttmac.cpp',
	'tweetnacl.cpp',
	'twofish.cpp',
	'validat0.cpp',
	'validat1.cpp',
	'validat10.cpp',
	'validat2.cpp',
	'validat3.cpp',
	'validat4.cpp',
	'validat5.cpp',
	'validat6.cpp',
	'validat7.cpp',
	'validat8.cpp',
	'validat9.cpp',
	'vmac.cpp',
	'wake.cpp',
	'whrlpool.cpp',
	'xed25519.cpp',
	'xtr.cpp',
	'xtrcrypt.cpp',
	'xts.cpp',
	'zdeflate.cpp',
	'zinflate.cpp',
	'zlib.cpp'
]

if get_option('shared_lib')
  libtype = 'shared_library'
  cpp_args += '-DCRYPTOPP_EXPORTS'
else
  libtype = 'static_library'
endif

if target_machine.cpu_family() == 'x86_64'
	cpp_args += [ '-D_M_X64' ]
endif

lib = build_target('cryptopp', sources,
	target_type : libtype,
	cpp_args : cpp_args,
	objects : libs,
	pic : true
)

cryptopp_dep = declare_dependency(
	include_directories : include,
	link_with : [ lib ]
)


