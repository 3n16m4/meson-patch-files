project('cryptopp', 'cpp', 
	version : '8.5.0',
	license: 'MIT',
	default_options : ['warning_level=2', 'cpp_std=c++14'])

include = include_directories('cryptopp')

cpp_args = [
	'-DCRYPTOPP_DISABLE_SSSE3',
	'-DCRYPTOPP_DISABLE_SSSE4',
	'-DCRYPTOPP_DISABLE_AESNI',
]

libs = []

sources = [
	'cryptopp/3way.cpp',
	'cryptopp/adler32.cpp',
	'cryptopp/algebra.cpp',
	'cryptopp/algparam.cpp',
	'cryptopp/allocate.cpp',
	'cryptopp/arc4.cpp',
	'cryptopp/aria.cpp',
	'cryptopp/aria_simd.cpp',
	'cryptopp/ariatab.cpp',
	'cryptopp/asn.cpp',
	'cryptopp/authenc.cpp',
	'cryptopp/base32.cpp',
	'cryptopp/base64.cpp',
	'cryptopp/basecode.cpp',
	'cryptopp/bench1.cpp',
	'cryptopp/bench2.cpp',
	'cryptopp/bench3.cpp',
	'cryptopp/bfinit.cpp',
	'cryptopp/blake2.cpp',
	'cryptopp/blake2b_simd.cpp',
	'cryptopp/blake2s_simd.cpp',
	'cryptopp/blowfish.cpp',
	'cryptopp/blumshub.cpp',
	'cryptopp/camellia.cpp',
	'cryptopp/cast.cpp',
	'cryptopp/casts.cpp',
	'cryptopp/cbcmac.cpp',
	'cryptopp/ccm.cpp',
	'cryptopp/chacha.cpp',
	'cryptopp/chacha_avx.cpp',
	'cryptopp/chacha_simd.cpp',
	'cryptopp/chachapoly.cpp',
	'cryptopp/cham.cpp',
	'cryptopp/cham_simd.cpp',
	'cryptopp/channels.cpp',
	'cryptopp/cmac.cpp',
	'cryptopp/cpu.cpp',
	'cryptopp/crc.cpp',
	'cryptopp/crc_simd.cpp',
	'cryptopp/cryptlib.cpp',
	'cryptopp/darn.cpp',
	'cryptopp/datatest.cpp',
	'cryptopp/default.cpp',
	'cryptopp/des.cpp',
	'cryptopp/dessp.cpp',
	'cryptopp/dh.cpp',
	'cryptopp/dh2.cpp',
	'cryptopp/dll.cpp',
	'cryptopp/dlltest.cpp',
	'cryptopp/donna_32.cpp',
	'cryptopp/donna_64.cpp',
	'cryptopp/donna_sse.cpp',
	'cryptopp/dsa.cpp',
	'cryptopp/eax.cpp',
	'cryptopp/ec2n.cpp',
	'cryptopp/eccrypto.cpp',
	'cryptopp/ecp.cpp',
	'cryptopp/elgamal.cpp',
	'cryptopp/emsa2.cpp',
	'cryptopp/eprecomp.cpp',
	'cryptopp/esign.cpp',
	'cryptopp/files.cpp',
	'cryptopp/filters.cpp',
	'cryptopp/fips140.cpp',
	'cryptopp/fipsalgt.cpp',
	'cryptopp/fipstest.cpp',
	'cryptopp/gcm.cpp',
	'cryptopp/gcm_simd.cpp',
	'cryptopp/gf256.cpp',
	'cryptopp/gf2_32.cpp',
	'cryptopp/gf2n.cpp',
	'cryptopp/gf2n_simd.cpp',
	'cryptopp/gfpcrypt.cpp',
	'cryptopp/gost.cpp',
	'cryptopp/gzip.cpp',
	'cryptopp/hc128.cpp',
	'cryptopp/hc256.cpp',
	'cryptopp/hex.cpp',
	'cryptopp/hight.cpp',
	'cryptopp/hmac.cpp',
	'cryptopp/hrtimer.cpp',
	'cryptopp/ida.cpp',
	'cryptopp/idea.cpp',
	'cryptopp/integer.cpp',
	'cryptopp/iterhash.cpp',
	'cryptopp/kalyna.cpp',
	'cryptopp/kalynatab.cpp',
	'cryptopp/keccak.cpp',
	'cryptopp/keccak_core.cpp',
	'cryptopp/keccak_simd.cpp',
	'cryptopp/lea.cpp',
	'cryptopp/lea_simd.cpp',
	'cryptopp/luc.cpp',
	'cryptopp/mars.cpp',
	'cryptopp/marss.cpp',
	'cryptopp/md2.cpp',
	'cryptopp/md4.cpp',
	'cryptopp/md5.cpp',
	'cryptopp/misc.cpp',
	'cryptopp/modes.cpp',
	'cryptopp/mqueue.cpp',
	'cryptopp/mqv.cpp',
	'cryptopp/nbtheory.cpp',
	'cryptopp/neon_simd.cpp',
	'cryptopp/oaep.cpp',
	'cryptopp/osrng.cpp',
	'cryptopp/padlkrng.cpp',
	'cryptopp/panama.cpp',
	'cryptopp/pch.cpp',
	'cryptopp/pkcspad.cpp',
	'cryptopp/poly1305.cpp',
	'cryptopp/polynomi.cpp',
	'cryptopp/ppc_power7.cpp',
	'cryptopp/ppc_power8.cpp',
	'cryptopp/ppc_power9.cpp',
	'cryptopp/ppc_simd.cpp',
	'cryptopp/pssr.cpp',
	'cryptopp/pubkey.cpp',
	'cryptopp/queue.cpp',
	'cryptopp/rabbit.cpp',
	'cryptopp/rabin.cpp',
	'cryptopp/randpool.cpp',
	'cryptopp/rc2.cpp',
	'cryptopp/rc5.cpp',
	'cryptopp/rc6.cpp',
	'cryptopp/rdrand.cpp',
	'cryptopp/rdtables.cpp',
	'cryptopp/regtest1.cpp',
	'cryptopp/regtest2.cpp',
	'cryptopp/regtest3.cpp',
	'cryptopp/regtest4.cpp',
	'cryptopp/rijndael.cpp',
	'cryptopp/rijndael_simd.cpp',
	'cryptopp/ripemd.cpp',
	'cryptopp/rng.cpp',
	'cryptopp/rsa.cpp',
	'cryptopp/rw.cpp',
	'cryptopp/safer.cpp',
	'cryptopp/salsa.cpp',
	'cryptopp/scrypt.cpp',
	'cryptopp/seal.cpp',
	'cryptopp/seed.cpp',
	'cryptopp/serpent.cpp',
	'cryptopp/sha.cpp',
	'cryptopp/sha3.cpp',
	'cryptopp/sha_simd.cpp',
	'cryptopp/shacal2.cpp',
	'cryptopp/shacal2_simd.cpp',
	'cryptopp/shake.cpp',
	'cryptopp/shark.cpp',
	'cryptopp/sharkbox.cpp',
	'cryptopp/simeck.cpp',
	'cryptopp/simon.cpp',
	'cryptopp/simon128_simd.cpp',
	'cryptopp/simple.cpp',
	'cryptopp/skipjack.cpp',
	'cryptopp/sm3.cpp',
	'cryptopp/sm4.cpp',
	'cryptopp/sm4_simd.cpp',
	'cryptopp/sosemanuk.cpp',
	'cryptopp/speck.cpp',
	'cryptopp/speck128_simd.cpp',
	'cryptopp/square.cpp',
	'cryptopp/squaretb.cpp',
	'cryptopp/sse_simd.cpp',
	'cryptopp/strciphr.cpp',
	'cryptopp/tea.cpp',
	'cryptopp/test.cpp',
	'cryptopp/tftables.cpp',
	'cryptopp/threefish.cpp',
	'cryptopp/tiger.cpp',
	'cryptopp/tigertab.cpp',
	'cryptopp/ttmac.cpp',
	'cryptopp/tweetnacl.cpp',
	'cryptopp/twofish.cpp',
	'cryptopp/validat0.cpp',
	'cryptopp/validat1.cpp',
	'cryptopp/validat10.cpp',
	'cryptopp/validat2.cpp',
	'cryptopp/validat3.cpp',
	'cryptopp/validat4.cpp',
	'cryptopp/validat5.cpp',
	'cryptopp/validat6.cpp',
	'cryptopp/validat7.cpp',
	'cryptopp/validat8.cpp',
	'cryptopp/validat9.cpp',
	'cryptopp/vmac.cpp',
	'cryptopp/wake.cpp',
	'cryptopp/whrlpool.cpp',
	'cryptopp/xed25519.cpp',
	'cryptopp/xtr.cpp',
	'cryptopp/xtrcrypt.cpp',
	'cryptopp/xts.cpp',
	'cryptopp/zdeflate.cpp',
	'cryptopp/zinflate.cpp',
	'cryptopp/zlib.cpp'
]

if get_option('shared_lib')
  libtype = 'shared_library'
  cpp_args += '-DCRYPTOPP_EXPORTS'
else
  libtype = 'static_library'
endif

if target_machine.cpu_family() == 'x86_64'
	cpp_args += [ '-D_M_X64' ]
endif

lib = build_target('cryptopp', sources,
	target_type : libtype,
	cpp_args : cpp_args,
	objects : libs,
	pic : true
)

cryptopp_dep = declare_dependency(
	include_directories : include,
	link_with : [ lib ]
)


